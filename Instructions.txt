FenixBox Assignment
Completed by Leong Wei Ming 

Description:
Thank you for this opportunity to interview with Fenix, 
I enjoyed this interesting assignment and appreciate any feedback 
on how the codes can be further improved. Because I only relied on 3
dependencies within the Python Standard Library, I opted not to provide
a setup for a virtual environment only for this case.

My answer/design consists of two python scripts.
1. "main.py" which is the main script that reads the inputs, validates 
and starts the simulation session by importing the Session class 
from "logic.py"; and
2. "logic.py" which contains the logic for the simulation

I also went a step further to code a React Visualisation in Javascript
so that the game can be visually simulated.
https://ivanleongwm.github.io/fe_visualisation/ 

Thanks again for taking out the time to view these codes.


Dependencies:
Installed Python3, version 3.11 and above have been tested. 
Only 3 modules from the Python Standard Library are required:
1. sys
2. re
3. argparse
These modules should come pre-installed with python3.

Installing
1. Save the two python scripts ("main.py" and "logic.py") in the same folder
in any directory you intend to run these scripts in. These two scripts
need to be in the same folder as "main.py" is importing the Session class 
from "logic.py" from the same folder unless otherwise amended/specified.

Executing the Python program:
Run the following linux command. 
python3 {path/main.py} {path/design_file_name} {path/test_file_name} {optional -d flag for debug mode}

For example: 
python3 main.py MedGridDesign.txt MedGridTest.txt
or 
python3 Downloads/main.py Downloads/MedGridDesign.txt Downloads/MedGridTest.txt
or 
python3 main.py MedGridDesign.txt MedGridTest -d

Note: Text files do not need to be .txt and debug mode can be turned on with
the optional "-d" flag.


Helper Command:
Run the "main.py" script with "--help" flag for details of required arguments:
python3 main.py --help


Design Thought Process:
I chose to implement the traversal logic in the clearest way possible,
by generating an n by n grid to represent FenixBox, and to get the Beam
object to traverse through the box square by square while checking for
deflections or absorptions until it reaches the end state. I understand
the generation of the grid and traversal are at worst case On2 (n squared)
time complexity, but it allowed me to implement the logic clearly.
I've represented a simulation using the Session class so that multiple simulations
can be run if required in future by importing this class.

Future Improvements:
Nevertheless, to improve the future efficiency of this code, the following
other implementations of "logic.py" can be considered:
1. Where the number of holes is large:
    To skip ahead and look at which mirrors intersect the path and jump
    straight to that mirror instead of going one step at a time.
2. Consider Caching Results
    If mirrors do not disappear, technically, the location where one ray enters
    and exits, will be the same for a second ray that enters via the exit in
    the opposite direction. Hence, by caching, we can determine the exit of the
    second ray going in the opposite path without traversal.
3. When the number of mirrors is small:
    Consider doing away with the generation of the grid that takes On2 time,
    Just to store mirrors in a dictionary and check against it.
4. If more than one simulation needs to be run:
    Consider multithreading and running sessions in parallel.

The ideal solution could be a combination of these implementation 
by using a scheduler to select the right logic given the input features.


Exit Codes to Exceptions Mapping:
Exit code 2: Incomplete arguments to CLI.
Exit code 3: Invalid design file name or path.
             Invalid test file name or path.
Exit code 4: Invalid rays in testfile.
             Invalid mirrors in designfile.
             Number of holes missing.
             Number of holes not on first uncommented line.
Exit Code 5: Mirror or Rays out of range or 0
Exit Code 6: Keyboard interrupt


Thanks everyone for reviewing this piece of work. 